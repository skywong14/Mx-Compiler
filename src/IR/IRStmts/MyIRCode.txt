declare void @print(ptr)
declare void @println(ptr)
declare void @printInt(i32)
declare void @printlnInt(i32)

declare ptr @getString()
declare i32 @getInt()

declare ptr @toString(i32)
declare i32 @string.length(ptr)
declare ptr @string.substring(ptr, i32, i32)
declare i32 @string.parseInt(ptr)
declare i32 @string.ord(ptr, i32)
declare ptr @string.add(ptr, ptr)
declare i1 @string.equal(ptr, ptr)
declare i1 @string.notEqual(ptr, ptr)
declare i1 @string.less(ptr, ptr)
declare i1 @string.lessOrEqual(ptr, ptr)
declare i1 @string.greater(ptr, ptr)
declare i1 @string.greaterOrEqual(ptr, ptr)

declare i32 @array.size(ptr)
declare ptr @_malloc(i32)
declare ptr @__arrayDeepCopy__(ptr)

declare i1 @__ptrEqual__(ptr, ptr)
declare i1 @__ptrNotEqual__(ptr, ptr)

; declare void @llvm.memset.p0.p0.i32(ptr, i8, i32, i1) ; 声明LLVM的内置memset函数，用于初始化内存为0

define ptr @__allocateArray__(i32 %arraySize) {
entry:
    ; 4 Byte + arraySize * 4 Byte
    %totalSize = add i32 %arraySize, 1
    %totalBytes = mul i32 %totalSize, 4

    %ptr = call ptr @_malloc(i32 %totalBytes) ; 调用malloc分配内存

    ; call void @llvm.memset.p0.p0.i32(ptr %ptr, i8 0, i32 %totalBytes, i1 false) ; 初始化为0 why wrong?(link error)

    ; 将数组大小存储在前4个字节
    %sizePtr = bitcast ptr %ptr to ptr  ; 将指针转换为指向i32的指针类型以存储大小
    store i32 %arraySize, ptr %sizePtr  ; 将数组大小存储到数组头部

    %elementPtr = getelementptr i32, ptr %sizePtr, i32 1 ; 跳过存储size的4个字节

    ret ptr %elementPtr ; 返回指向第一个元素的指针
}

